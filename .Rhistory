getwd()
library(bldRpckgw2)
devtools::document()
?fars_read
?dplyr
?mutate
??mutate
?fars_read
library(devtools)
document()
?fars_read
document()
?@importFrom
?roxygen2
?str_length
?fars_read_years
document()
?fars_read_years
?make_filename
?make_filename
document()
?make_filename
document()
?fars_read_years
library(bldRpckgw2)
?fars_read_years
fars_summarize_years(list("2012", 2013))
library(dplyr)
fars_summarize_years(list("2012", 2013))
fars_summarize_years(list("2014", 2013))
fars_summarize_years(list(2014, 2013))
data$STATE
#' Title
#'
#' @param state.num
#' @param year
#'
#' @return
#' @export
#'
#' @examples
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
fars_map_state("1", 2013)
fars_map_state("50", 2013)
fars_map_state("49", 2013)
year <- 2014
?fars_read_years
document()
?fars_summarize_years
#'
#' Returns an error if the \code{state.num} is not in the dataframe. Returns a warning if there is no accident to plot.
#'
#' @seealso \link{make_filename}, \link{fars_read}, \link[maps]{map}
#' @export
#'
#' @examples
#' \dontrun{
#' fars_map_state("1", 2014)
#' }
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
library(bldRpckgw2)
?fars_map_state
document()
?fars_map_state
library(bldRpckgw2)
library(bldRpckgw2)
?fars_map_state
